<source>
  @type udp
  tag orchesty
  port 5120

  <parse>
    @type json
  </parse>
</source>

<source>
  @type http
  port 9880

  <parse>
    @type json
  </parse>
</source>

<filter orchesty.**>
  @type grep

  <regexp>
    key isForUi
    pattern /true/
  </regexp>
</filter>

<filter orchesty.**>
    @type record_transformer
    enable_ruby true

    <record>
      message ${record["message"]}
      pipes {
        "user_id": "${record[\"userId\"]}",
        "parent_id": "${record[\"parentId\"]}",
        "severity": "${if record[\"level\"]; record[\"level\"]; else; record[\"levelName\"]; end;}",
        "service": "${record[\"service\"]}",
        "timestamp": "${record[\"timestamp\"]}",
        "node_id": "${record[\"nodeId\"]}",
        "topology_id": "${record[\"topologyId\"]}",
        "process_id": "${record[\"processId\"]}",
        "correlation_id": "${record[\"correlationId\"]}",
        "applications": "${record[\"applications\"]}",
        "previousCorrelationId": "${record[\"previousCorrelationId\"]}",
        "sequenceId": "${record[\"sequenceId\"]}",
        "previousNodeId": "${record[\"previousNodeId\"]}"
      }
    </record>

    remove_keys level, userId, parentId, levelName, service, timestamp, nodeId, topologyId, processId, correlationId, applications, previousCorrelationId, sequenceId, previousNodeId, isForUi
</filter>

<match orchesty.**>
  @type mongo

  connection_string "#{ENV['MONGO_DSN']}"
  collection "#{ENV['MONGO_COLLECTION']}"

  <buffer>
    flush_mode immediate
  </buffer>

  <inject>
    time_key ts
  </inject>
</match>
