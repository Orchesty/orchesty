dbrp "pipes"."default"

var sample = 5s
var retention = '5s'

var rabbitMqData = stream
   |from()
       .database('pipes')
       .retentionPolicy('default')
       .measurement('rabbitmq')
   |barrier()
       .period(sample)
   |window()
       .period(sample)
       .every(sample)
   |groupBy('queue')
   |default()
       .field('messages', 0)

var messagesAvg = rabbitMqData
    |mean('messages')
        .as('message')

var messagesMax = rabbitMqData
    |max('messages')
        .as('message')
    |delete().field('consumer_utilisation')
    |delete().field('idle_since')
    |delete().field('memory')
    |delete().field('consumers')
    |delete().field('message_bytes')
    |delete().field('message_bytes_persist')
    |delete().field('message_bytes_ram')
    |delete().field('message_bytes_ready')
    |delete().field('message_bytes_unacked')
    |delete().field('messages_ack')
    |delete().field('messages_ack_rate')
    |delete().field('messages_deliver')
    |delete().field('messages_deliver_get')
    |delete().field('messages_deliver_get_rate')
    |delete().field('messages_deliver_rate')
    |delete().field('messages_publish')
    |delete().field('messages_publish_rate')
    |delete().field('messages_ready')
    |delete().field('messages_redeliver')
    |delete().field('messages_redeliver_rate')
    |delete().field('messages_unack')

var messSum = rabbitMqData
    |sum('messages')
        .as('time')

var messCount = rabbitMqData
    |count('messages')
        .as('time')

messagesAvg
   |join(messagesMax, messSum, messCount)
       .as('avg', 'max', 'sum', 'count')
   |influxDBOut()
       .database('pipes')
       .measurement('rabbitmq')
       .precision('ms')
       .retentionPolicy(retention)


