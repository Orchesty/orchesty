dbrp "pipes"."default"

var sample = 5s
var retention = '5s'

var bridgeData = stream
   |from()
       .database('pipes')
       .retentionPolicy('default')
       .measurement('pipes_node')
   |barrier()
       .period(sample)
   |window()
       .period(sample)
       .every(sample)
   |groupBy('topology_id', 'node_id')

// Total Processes
var total = bridgeData
   |count('bridge_job_result_success')

var totalFailed = bridgeData
   |where(lambda: "bridge_job_result_success" == FALSE)
   |count('bridge_job_result_success')

// Bridge data
var waitingTimeAvg = bridgeData
    |mean('bridge_job_waiting_duration')
        .as('time')

var timeMinWaiting = bridgeData
    |min('bridge_job_waiting_duration')
        .as('waiting')
    |delete().field('bridge_job_result_success')
    |delete().field('bridge_job_worker_duration')

var timeMinProcess = bridgeData
    |min('bridge_job_total_duration')
        .as('process')
    |delete().field('bridge_job_result_success')
    |delete().field('bridge_job_worker_duration')

var timeMaxWaiting = bridgeData
    |max('bridge_job_waiting_duration')
        .as('waiting')
    |delete().field('bridge_job_result_success')
    |delete().field('bridge_job_worker_duration')

var timeMaxProcess = bridgeData
    |max('bridge_job_total_duration')
        .as('process')
    |delete().field('bridge_job_result_success')
    |delete().field('bridge_job_worker_duration')

var processTimeAvg = bridgeData
    |mean('bridge_job_total_duration')
        .as('time')

total
   |join(totalFailed, waitingTimeAvg, timeMinWaiting, timeMaxWaiting, timeMinProcess, timeMaxProcess, processTimeAvg)
       .as('total', 'failed', 'avg_waiting', 'job_min.waiting', 'job_max.waiting', 'job_min.process', 'job_max.process', 'avg_process')
   |influxDBOut()
       .database('pipes')
       .measurement('bridges')
       .precision('ms')
       .retentionPolicy(retention)
