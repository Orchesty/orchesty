dbrp "pipes"."default"

var sample = 5s
var retention = '5s'

var monolithData = stream
   |from()
       .database('pipes')
       .retentionPolicy('default')
       .measurement('monolith')
   |barrier()
       .period(sample)
   |window()
       .period(sample)
       .every(sample)
   |groupBy('topology_id', 'node_id')

var cpuKernelAvg = monolithData
    |mean('fpm_cpu_kernel_time')
        .as('avg')

var tmpCpuMin = monolithData
    |min('fpm_cpu_kernel_time')
        .as('kernel')

var cpuMin = tmpCpuMin
    |min('fpm_cpu_user_time')
        .as('user')
    |delete().field('fpm_request_total_duration')
    |delete().field('sent_request_total_duration')

var tmpCpuMax = monolithData
    |max('fpm_cpu_kernel_time')
        .as('kernel')

var cpuMax = tmpCpuMax
    |max('fpm_cpu_user_time')
        .as('user')
    |delete().field('fpm_request_total_duration')
    |delete().field('sent_request_total_duration')

var cpuUserAvg = monolithData
    |mean('fpm_cpu_user_time')
        .as('avg')

cpuKernelAvg
   |join(cpuMin, cpuMax, cpuUserAvg)
       .as('cpu_kernel', 'cpu_min', 'cpu_max', 'cpu_user')
   |influxDBOut()
       .database('pipes')
       .measurement('monolith')
       .precision('ms')
       .retentionPolicy(retention)
